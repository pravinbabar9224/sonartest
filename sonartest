node {
  stage('SCM') {
    git 'https://github.com/pravinbabar9224/sonartest.git'
  }
  stage('build & SonarQube Scan') {
    withSonarQubeEnv('SonarQube-Server') {
      sh 'mvn clean package sonar:sonar'
    } // SonarQube taskId is automatically attached to the pipeline context
  }
}
 
// No need to occupy a node
stage("Quality Gate") {
  timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
    if (qg.status != 'OK') {
      error "Pipeline aborted due to quality gate failure: ${qg.status}"
    }
  }
}

stage('Email Notification'){
      mail bcc: '', body: '''Hi Welcome to jenkins email alerts
      Thanks
      Hari''', cc: '', from: '', replyTo: '', subject: 'Jenkins Job', to: 'pravinbabar9224@gmail.com'
      }
stage("Slack Notification"){
    slackSend baseUrl: 'https://hooks.slack.com/services/', 
    channel: '#jenkins-integration-sonarqube', 
    color: 'good', 
    message: 'Welcome to Jenkins, Slack!',
    teamDomain: 'cloudmonster', 
    tokenCredentialId: 'new-webhook'
}

